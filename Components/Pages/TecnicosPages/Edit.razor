@page "/Tecnicos/Edit/{tecnicosID:int}"
@inject TecnicosService TecnicosService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<EditForm Model="Tecnicos" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card shadow-lg border-0 rounded" style="background-color: #f8f9fa;">
        <div class="card-header bg-primary text-white" style="text-align: center;">
            <h3> <i class="fas fa-clipboard-list"></i> Editar Tecnico</h3>
        </div>

        <div class="card-body">

            <div class="row">

                <div class="col-md-6 mb-3">
                    <label for="TecnicosID" class="form-label">TecnicoID:</label>
                    <div class="input-group">
                        <div style="width: 40%; height: 1em;">
                            <InputNumber @bind-Value="Tecnicos.TecnicosID" class="form-control" style="font-size: 0.8em;" aria-describedby="BotonBuscar" />
                        </div>
                    </div>
                </div>
            </div>

            <div class="mb-3">
                <label for="Nombre" class="form-label">Nombre:</label>
                <InputText @bind-Value="Tecnicos.Nombre" class="form-control" />
                <ValidationMessage For="@(() => Tecnicos.Nombre)" />
            </div>

            <div class="mb-3">
                <label for="sueldoHora" class="form-label">Sueldo horas:</label>
                <InputNumber @bind-Value="Tecnicos.SueldoHora" class="form-control" />
                <ValidationMessage For="@(() => Tecnicos.SueldoHora)" />
            </div>
        </div>


        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="alert alert-danger" role="alert">
                @ErrorMessage
            </div>
        }

        <div class="card-footer bg-light d-flex justify-content-center mt-3">
            <div class="btn-group">
                <button type="button" class="btn btn-outline-primary ml-2" @onclick="Nuevo"><span class="bi bi-plus"></span> Nuevo </button>
                <button type="submit" class="btn btn-outline-success ml-2"><span class="bi bi-check-circle-fill"></span> Guardar </button>
                <a type="button" href="/Tecnicos/Index" class="btn btn-outline-danger"><span class="bi bi-arrow-bar-left"></span> Retroceder </a>
            </div>
        </div>
    </div>
</EditForm>


@code {
    [Parameter]
    public int? tecnicosID { get; set; }
    public string? Nombre { get; set; }
    public Tecnicos Tecnicos { get; set; } = new Tecnicos();
    private bool Existe = false;
    private string ErrorMessage { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (tecnicosID.HasValue)
        {
            Tecnicos.TecnicosID = tecnicosID.Value;
            await Buscar();
        }
    }

    public void Nuevo()
    {
        Tecnicos = new Tecnicos();
        Existe = false;
    }

    public async Task Buscar()
    {
        var tecnicoEncontrado = await TecnicosService.Buscar(Tecnicos.TecnicosID);

        if (tecnicoEncontrado != null)
        {
            Tecnicos = tecnicoEncontrado;
        }
    }


    public async Task<bool> Validar()
    {
        Nombre = Tecnicos.Nombre;

        if (Nombre == Tecnicos.Nombre && tecnicosID == Tecnicos.TecnicosID)
        {
            ErrorMessage = string.Empty;
            return true;
        }

        Existe = await TecnicosService.NombreExiste(Tecnicos.Nombre) && await TecnicosService.Existe(Tecnicos.TecnicosID);


        if (Existe)
        {
            ErrorMessage = "Ya existe un técnico con este Nombre o ID.";
        }
        else
        {
            ErrorMessage = string.Empty;
        }

        return !Existe;
    }


    public async Task Guardar()
    {
        if (!await Validar())
        {
            return;
        }

        var guardo = await TecnicosService.Guardar(Tecnicos);
        if (guardo)
        {
            Volver();
        }


    }

    public async Task Eliminar()
    {
        var eliminado = await TecnicosService.Eliminar(Tecnicos.TecnicosID);
        Nuevo();
    }

    public void Volver()
    {
        NavigationManager.NavigateTo("/Tecnicos/Index");
    }

}


