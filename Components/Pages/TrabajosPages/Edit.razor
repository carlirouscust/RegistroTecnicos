@page "/Trabajos/Edit/{TrabajosID:int}"
@inject TrabajosService TrabajosService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Editar de Trabajos</PageTitle>

<EditForm Model="Trabajos" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card shadow-lg border-0 rounded" style="background-color: #f8f9fa;">
        <div class="card-header bg-primary text-white" style="text-align: center;">
            <h3> <i class="fas fa-clipboard-list"></i> Editar Trabajos</h3>
        </div>

        <div class="card-body">
            @* TrabajosID *@
            <div class="col">
                <div class="col-md-3 mb-3">
                    <label for="TrabajosID" class="form-label">TrabajoID:</label>
                    <div class="input-group">
                        <InputNumber @bind-Value="Trabajos.TrabajosID" class="form-control" aria-describedby="BotonBuscar" disabled />
                    </div>
                </div>
            </div>

            @* Fecha Creado *@
            <div class="col-md-3 mb-3">
                <label for="Fecha" class="form-label">Fecha:</label>
                <InputDate @bind-Value="Trabajos.Fecha" class="form-control" />
                <ValidationMessage For="@(() => Trabajos.Fecha)" />
            </div>

            @* Cliente *@
            <div class="mb-3">
                <label for="Clientes" class="form-label">Cliente:</label>
                <InputSelect @bind-Value="Trabajos.ClientesID" class="form-select" aria-label="ClientesID">
                    <option value="0">Seleccione un tipo de tecnico</option>
                    @foreach (var item in ListaClientes)
                    {
                        <option value="@item.ClientesID">@item.Nombre</option>
                    }
                </InputSelect>              

            </div>

            @* Tecnico *@
            <div class="mb-3">
                <label for="Tecnico" class="form-label">Tecnico:</label>
                <InputSelect @bind-Value="Trabajos.TecnicosID" class="form-select" aria-label="TecnicosID">
                    <option value="0">Seleccione un tecnico</option>
                    @foreach (var item in ListaTecnicos)
                    {
                        <option value="@item.TecnicosID">@item.Nombre - (@item.tiposTecnicos.Descripcion)</option>
                    }
                </InputSelect>             

            </div>

            @* Descripcion *@
            <div class="mb-3">
                <label for="Descripcion" class="form-label">Descripcion:</label>
                <InputText @bind-Value="Trabajos.Descripcion" class="form-control" />
                <ValidationMessage For="@(() => Trabajos.Descripcion)" />
            </div>

            @* Prioridad *@
            <div class="mb-3">
                <label for="Prioridad" class="form-label">Prioridad:</label>
                <InputSelect @bind-Value="Trabajos.PrioridadesID" class="form-select" aria-label="PrioridadesID">
                    <option value="0">Seleccione la Prioridad</option>
                    @foreach (var item in ListaPrioridades)
                    {
                        <option value="@item.PrioridadesID">@item.Descripcion</option>
                    }
                </InputSelect>
            </div>

            @* Monto *@
            <div class="mb-3">
                <label for="Monto" class="form-label">Monto:</label>
                <InputNumber @bind-Value="Trabajos.Monto" class="form-control" />
                <ValidationMessage For="@(() => Trabajos.Monto)" />
            </div>
        </div>

        @* Detalles de articulos*@
        <div class="card border-success mb-3">
            <div class="card-header">
                <h5 class="mb-0">Detalles de articulos utilizados</h5>
            </div>
            @*Seleccionar articulo*@
            <div style="display: flex; align-items: center;">
                <div class="col-2">
                    <InputSelect @bind-Value="selectedArticuloId" class="form-select">
                        <option value="0">--Seleccione un articulo--</option>
                        @foreach (var item in ListaArticulos)
                        {
                            <option value="@item.articuloId">@item.articuloId - @item.descripcion - Existencia: (@item.existencia.ToString())</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => selectedArticuloId)" />
                </div>
                @*Cantidad*@
                <div class="col-2">
                    <div class="input-group">
                        <span class="input-group-text">Cantidad:</span>
                        <InputNumber @bind-Value="trabajosDetalles.cantidad" class="form-control" />
                    </div>
                    <ValidationMessage For="@(() => trabajosDetalles.cantidad)" />
                </div>
                @*Precio*@
                <div class="col-2">
                    <div class="input-group">
                        <span class="input-group-text">Precio:</span>
                        <InputNumber @bind-Value="trabajosDetalles.precio" class="form-control" Disabled />
                    </div>
                    <ValidationMessage For="@(() => trabajosDetalles.precio)" />
                </div>
                @*agregarDetalle*@
                <div class="col-sm-2 p-0">
                    <button type="button" class="btn btn-outline-success" @onclick="AgregarDetalle">
                        <span class="bi bi-plus"></span> Agregar
                    </button>
                </div>
            </div>

            @* Tabla de Detalles *@
            <div class="table-responsive mt-3">
                <table class="table table-bordered text-center">
                    <thead>
                        <tr>
                            <th>Artículo</th>
                            <th>Cantidad</th>
                            <th>Precio</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var detalle in ListaDetalle)
                        {
                            <tr>
                                <td>@detalle.articuloId</td>
                                <td>@detalle.cantidad</td>
                                <td>@detalle.precio</td>
                                <td>
                                    <button type="button" class="btn btn-outline-danger" @onclick="() => EliminarDetalle(detalle)">
                                        <span class="bi bi-trash"></span> Remover
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="alert alert-danger" role="alert">
                @ErrorMessage
            </div>
        }

        <div class="card-footer bg-light d-flex justify-content-center mt-3">
            <div class="btn-group">
                <button type="button" class="btn btn-outline-primary ml-2" @onclick="Nuevo"><span class="bi bi-plus"></span> Nuevo </button>
                <button type="submit" class="btn btn-outline-success ml-2"><span class="bi bi-check-circle-fill"></span> Guardar </button>
                <a type="button" href="/Trabajos/Index/" class="btn btn-outline-danger"><span class="bi bi-arrow-bar-left"></span> Retroceder </a>
            </div>
        </div>
    </div>
</EditForm>





@code {
    [Parameter]
    public int TrabajosID { get; set; }
    public Trabajos Trabajos { get; set; } = new Trabajos();
    public TrabajosDetalles trabajosDetalles { get; set; } = new TrabajosDetalles();
    private bool Existe = true;
    private string ErrorMessage { get; set; } = string.Empty;
    public List<Clientes> ListaClientes { get; set; } = new List<Clientes>();
    public List<Tecnicos> ListaTecnicos { get; set; } = new List<Tecnicos>();
    public List<Prioridades> ListaPrioridades { get; set; } = new List<Prioridades>();
    public List<TrabajosDetalles> ListaDetalle { get; set; } = new List<TrabajosDetalles>();
    public List<Articulos> ListaArticulos { get; set; } = new List<Articulos>();
    public List<Trabajos> ListaTrabajos { get; set; } = new List<Trabajos>();
    public int selectedArticuloId { get; set; }
    int? montoArticulos;

    protected override async Task OnInitializedAsync()
    {        
        if (TrabajosID != 0)
        {
            Trabajos.TrabajosID = TrabajosID;          
            ListaClientes = await TrabajosService.ObtenerClientes();
            ListaTecnicos = await TrabajosService.ObtenerTecnicos();
            ListaPrioridades = await TrabajosService.ObtenerPrioridades();           
            ListaArticulos = await TrabajosService.ObtenerArticulos();           

            ListaDetalle = await TrabajosService.ObtenerDetallesTrabajoId(TrabajosID) ?? new List<TrabajosDetalles>();
            await Buscar();           
        }
    }

    public async Task AgregarDetalle()
    {
        ErrorMessage = string.Empty;

        var articuloSeleccionado = ListaArticulos.FirstOrDefault(a => a.articuloId == selectedArticuloId);

        if (articuloSeleccionado == null || trabajosDetalles.cantidad <= 0)
        {
            ErrorMessage = "Seleccione un artículo y una cantidad válida.";
            return;
        }

        if (articuloSeleccionado.existencia < trabajosDetalles.cantidad)
        {
            ErrorMessage = "No hay suficiente existencia del artículo para completar la operación.";
            return;
        }

        articuloSeleccionado.existencia -= trabajosDetalles.cantidad;

        trabajosDetalles.precio = articuloSeleccionado.precio;

        var nuevoDetalle = new TrabajosDetalles
            {
                articuloId = articuloSeleccionado.articuloId,
                cantidad = trabajosDetalles.cantidad,
                precio = articuloSeleccionado.precio
            };


        ListaDetalle.Add(nuevoDetalle);

        trabajosDetalles = new TrabajosDetalles();
        selectedArticuloId = 0;

        CalcularMontoTotal();
    }

    private async Task CalcularMontoTotal()
    {
        montoArticulos = (int?)ListaDetalle.Sum(d => (d.precio * d.cantidad));
    }

    public async Task EliminarDetalle(TrabajosDetalles detalle)
    {
        var articuloSeleccionado = ListaArticulos.FirstOrDefault(a => a.articuloId == detalle.articuloId);

        if (articuloSeleccionado != null)
        {
            articuloSeleccionado.existencia += detalle.cantidad;
        }
        ListaDetalle.Remove(detalle);
        selectedArticuloId = detalle.articuloId;
        trabajosDetalles.cantidad = detalle.cantidad;
        trabajosDetalles.precio = detalle.precio;

        trabajosDetalles = new TrabajosDetalles();
        selectedArticuloId = 0;

        CalcularMontoTotal();
    }

    public void Nuevo()
    {
        Trabajos = new Trabajos();
        Existe = false;
    }

    public async Task Buscar()
    {
        var trabajoEncontrado = await TrabajosService.Buscar(Trabajos.TrabajosID);

        if (trabajoEncontrado != null)
        {
            Trabajos = trabajoEncontrado;
           
            await CalcularMontoTotal();
        }
    }


    public bool Validar()
    {
        Existe = TrabajosService.Listar(t => t.TrabajosID == Trabajos.TrabajosID).Any();
        return !Existe;
    }

    public async Task Guardar()
    {
        if (Validar()) 
        {
            return;
        }

        var guardo = await TrabajosService.Guardar(Trabajos);

        if (guardo)
        {
            Volver();
        }
        return;
    }


    public void Volver()
    {
        NavigationManager.NavigateTo("/Trabajos/Index");
    }

}


